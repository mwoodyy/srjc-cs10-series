#include <iostream>
#include <vector>
using namespace std;

class Queen {
public: 
    void setRow(int inRow);
    int getRow() const;
private:
    int row;
};

int Queen::getRow() const {
    return row;
}

void Queen::setRow(int inRow) {
    row = inRow;
}

class Board {
public:
    static const int BOARD_SIZE = 8;
    Board();
    void doQueens();
    void display() const;
private:
    bool placeQueens(int row, int col);
    bool findNextSafeSquare(int& row, int col);
    bool isUnderAttack(int testRow, int testCol);
    vector<Queen> queens;
};

Board::Board() {
    queens.resize(BOARD_SIZE);
}

void Board::doQueens() {
    if (placeQueens(0, 0)) {
        display();
    } else {
        cout << "No solution found." << endl;
    }
}

bool Board::placeQueens(int row, int col) {
    if (col >= BOARD_SIZE) {
        return true;
    }

    while (findNextSafeSquare(row, col)) {
        queens[col].setRow(row);
        if (placeQueens(0, col + 1)) {
            return true;
        } else {
            findNextSafeSquare(++row, col);
        }
    }
    return false;
}

bool Board::isUnderAttack(int testRow, int testCol) {
    for (int i = 0; i < testCol; ++i) {
        int row = queens[i].getRow();
        if (row == testRow || abs(row - testRow) == abs(i - testCol)) {
            return true;
        }
    }
    return false;
}

bool Board::findNextSafeSquare(int& row, int col) {
    while (row < BOARD_SIZE) {
        if (!isUnderAttack(row, col)) {
            return true;
        }
        row++;
    }
    return false;
}

void Board::display() const {
    for (int i = 0; i < BOARD_SIZE; ++i) {
        for (int j = 0; j < BOARD_SIZE; ++j) {
            if (queens[j].getRow() == i) {
                cout << "X ";
            } else {
                cout << "_ ";
            }
        }
        cout << endl;
    }
}

int main() {
    Board board;
    board.doQueens();
}
